@page "/"
@page "/employees"
@page "/employees/{action?}"
@inject DialogService DialogService
@implements IDisposable
@using Employee = global::Employee.ManagementSystem.Core.Models.Employee

@inject IEmployeeService Service
@inject NavigationManager NavManager
@inject NotificationService NotificationService

<h3>List of Employees</h3>
<hr/>
@if (_employees == null)
{
    <p>
        <em>Loading...</em>
    </p>
}
else
{
    <NavLink class="btn btn-primary" href="/employee/new">
        New Employee
    </NavLink>
    <hr/>
    <table class="table">
        <thead>
        <tr>
            <th>Name</th>
            <th>Email</th>
            <th>Date Of Birth</th>
            <th>Department</th>
            <th>Options</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var employee in _employees)
        {
            <tr>
                <td>@employee.Name</td>
                <td>@employee.Email</td>
                <td>@employee.DateOfBirth?.ToShortDateString()</td>
                <td>@employee.Department.Name</td>
                <td>
                    <RadzenButton 
                        ButtonStyle="ButtonStyle.Primary" 
                        Text="Edit"
                        Click="() => GoEdit(employee.Id)"/>
                    <RadzenButton 
                        Text="Delete"
                        ButtonStyle="ButtonStyle.Secondary" 
                        Click="() => OpenDialog(employee)" />
                </td>
            </tr>
        }
        </tbody>
    </table>
}

@code {
    [Parameter]
    public string? Action { get; set; }
    
    private IList<Employee> _employees = null!;
    private Employee _employeeSelected = new Employee();

    protected override async Task OnInitializedAsync()
    {
        _employees = await Service.GetAll();

        if (Action == "added")
        {
            Helper.ShowNotification(
                "Success", 
                "A new employee was added correctly", 
                NotificationSeverity.Success,
                NotificationService);
        } else if (Action == "edited")
        {
            Helper.ShowNotification(
                "Success", 
                "A employee was updated correctly", 
                NotificationSeverity.Success,
                NotificationService);
        }
    }

    protected override void OnInitialized()
    {
        DialogService.OnOpen += Open;
        DialogService.OnClose += Close;
    }

    private void OpenDialog(Employee employee)
    {
        _employeeSelected = employee;
        
        DialogService.Confirm("Are you sure?", "Confirm",
                new ConfirmOptions() { OkButtonText = "Yes", CancelButtonText = "No" });
    }

    public void Dispose()
    {
        // The DialogService is a singleton so it is advisable to unsubscribe.
        DialogService.OnOpen -= Open;
        DialogService.OnClose -= Close;
    }
    
    void Open(string title, Type type, Dictionary<string, object> parameters, DialogOptions options)
    {
        Console.WriteLine("Dialog opened");
    }

    async void Close(dynamic result)
    {
        if (!(bool)result) return;
        
        Console.WriteLine(result);
        var id = _employeeSelected.Id;
        await Service.Delete(id);
        _employees = await Service.GetAll();
        await InvokeAsync(StateHasChanged);
        Helper.ShowNotification(
            "Success", 
            "A employee was deleted correctly", 
            NotificationSeverity.Success,
            NotificationService);
    }
    
    void GoEdit(int Id)
    {
        NavManager.NavigateTo($"/Employee/edit/{Id}");
    }
}