@page "/employees"
@inject DialogService DialogService
@implements IDisposable
@using Employee = global::Employee.ManagementSystem.Core.Models.Employee

@inject IEmployeeService Service
@inject NavigationManager NavManager

<h3>List of Employees</h3>
<hr/>
<NavLink class="btn btn-primary" href="/employee/new">
    New Employee
</NavLink>
<hr/>
@if (_employees == null)
{
    <p>
        <em>Loading...</em>
    </p>
}
else
{
    <table class="table">
        <thead>
        <tr>
            <th>Name</th>
            <th>Email</th>
            <th>Date Of Birth</th>
            <th>Department</th>
            <th>Options</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var employee in _employees)
        {
            <tr>
                <td>@employee.Name</td>
                <td>@employee.Email</td>
                <td>@employee.DateOfBirth?.ToShortDateString()</td>
                <td>@employee.Department.Name</td>
                <td>
                    <RadzenButton ButtonStyle="ButtonStyle.Primary" Text="Edit" />
                    <RadzenButton 
                        Text="Delete"
                        ButtonStyle="ButtonStyle.Secondary" 
                        Click="() => OpenDialog(employee)" />
                </td>
            </tr>
        }
        </tbody>
    </table>
}

@code {
    private IList<Employee> _employees = null!;
    private Employee _employeeSelected = new Employee();

    protected override async Task OnInitializedAsync()
    {
        _employees = await Service.GetAll();
    }

    protected override void OnInitialized()
    {
        DialogService.OnOpen += Open;
        DialogService.OnClose += Close;
    }

    private void OpenDialog(Employee employee)
    {
        _employeeSelected = employee;
        
        DialogService.Confirm("Are you sure?", "Confirm",
                new ConfirmOptions() { OkButtonText = "Yes", CancelButtonText = "No" });
    }

    public void Dispose()
    {
        // The DialogService is a singleton so it is advisable to unsubscribe.
        DialogService.OnOpen -= Open;
        DialogService.OnClose -= Close;
    }
    
    void Open(string title, Type type, Dictionary<string, object> parameters, DialogOptions options)
    {
        Console.WriteLine("Dialog opened");
    }

    async void Close(dynamic result)
    {
        if ((bool)result)
        {
            Console.WriteLine(result);
            await Service.Delete(_employeeSelected.Id);
        }
    }

}