@page "/Employee/Edit/{Id:int}"
@using global::Employee.ManagementSystem.Shared.Employee.InputModels
@using global::Employee.ManagementSystem.Core.Models
@using AutoMapper
@using Microsoft.AspNetCore.WebUtilities

@inject NavigationManager NavManager
@inject IDepartmentService ServiceDeparment
@inject IEmployeeService ServiceEmployee
@inject NavigationManager NavigationHelper

<h3>Edit</h3>

<div class="row">
    <div class="col">
        <NavLink class="btn btn-primary" href="/employees">
            Cancel
        </NavLink>
    </div>
</div>

<EditForm Model="@UpdateEmployeeInputModel" OnValidSubmit="SubmitValidForm">
    <FluentValidationValidator/>
    <div class="form-group">
        <label class="col-form-label">Name:</label>
        <div class="col-md-6">
            <RadzenTextBox 
                @bind-Value="@UpdateEmployeeInputModel.Name" 
                Class="w-100" />
            <ValidationMessage For="() => UpdateEmployeeInputModel.Name"></ValidationMessage>
        </div>
    </div>
    <div class="form-group">
        <label class="col-form-label">Email:</label>
        <div class="col-md-6">
            <RadzenTextBox 
                @bind-Value="@UpdateEmployeeInputModel.Email" 
                Class="w-100" />
            <ValidationMessage For="() => UpdateEmployeeInputModel.Email"></ValidationMessage>
        </div>
    </div>
    <div class="form-group">
        <label class="col-form-label">Date of Birth:</label>
        <div class="col-md-6">
            <RadzenDatePicker 
                TValue="DateTime" 
                @bind-Value=@UpdateEmployeeInputModel.DateOfBirth
                Min="@MinDate"
                Max="@MaxDate"
                DateFormat="d"
                ShowTime="false"
                Class="w-100"/>
            <ValidationMessage For="() => UpdateEmployeeInputModel.DateOfBirth"></ValidationMessage>
        </div>
    </div>
    <div class="form-group">
        <label class="col-form-label">Department:</label>
        <div class="col-md-6">
            <RadzenDropDown 
                AllowClear="true" 
                @bind-Value="@UpdateEmployeeInputModel.DepartmentId"
                TValue="int" 
                Class="w-100" 
                Data=@_departments
                TextProperty="Name" 
                ValueProperty="Id"
                 />
            <ValidationMessage For="() => UpdateEmployeeInputModel.DepartmentId"></ValidationMessage>
        </div>
    </div>
    <br/>
    <button class="btn btn-success" type="submit">Save</button>
</EditForm>


@code {
    [Parameter]
    public int Id { get; set; }

    [Inject]
    public IMapper Mapper { get; set; } = null!;
    
    UpdateEmployeeInputModel UpdateEmployeeInputModel = new UpdateEmployeeInputModel();
    IList<Department> _departments = new List<Department>();
    
    DateTime MinDate = new DateTime(1900,DateTime.Now.Month,01);
    DateTime MaxDate = DateTime.Now.Subtract(new TimeSpan(43800, 0, 0));
    
    protected override async Task OnInitializedAsync()
    {
        _departments = await ServiceDeparment.GetAll();

        var employeeToUpdate = await ServiceEmployee.Get(Id);
        UpdateEmployeeInputModel = Mapper.Map<UpdateEmployeeInputModel>(employeeToUpdate);
    }

    void SubmitValidForm()
    {
        
    }

}